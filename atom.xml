<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>空心话</title>
  
  <subtitle>闲来无事</subtitle>
  <link href="/lipapa.github.io/atom.xml" rel="self"/>
  
  <link href="https://lipapasma.github.io/lipapa.github.io/"/>
  <updated>2018-07-27T06:16:04.688Z</updated>
  <id>https://lipapasma.github.io/lipapa.github.io/</id>
  
  <author>
    <name>Lipapa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dom 对象</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/27/Dom-%E5%AF%B9%E8%B1%A1/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/27/Dom-对象/</id>
    <published>2018-07-27T00:38:49.000Z</published>
    <updated>2018-07-27T06:16:04.688Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>Dom 对象关系:</strong><br>  <img src="https://images2018.cnblogs.com/blog/1364550/201807/1364550-20180726192702227-1138070441.png" alt="dom结构"><br> <strong>节点自身属性</strong><br>  -attributes  —&gt;  节点(元素)的属性节点<br>  -nodeType    —&gt;  节点类型<br>  -nodeValue   —&gt;  节点值<br>  -innerHTML   —&gt;  节点<br> <strong>导航属性</strong><br>  -parentNOde  —&gt; 节点元素的父节点<br>  -firstChild  —&gt; 节点下第一个子元素<br>  -lastChild   —&gt; 节点下最后一个子元素<br>  -childNodes  —&gt; 节点元素的子节点<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello yuan<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">    var div=document.getElementById("div2");</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    console.log(div.nextSibling.nodeName);  //思考:为什么不是P?</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>  <strong>节点数中的节点彼此拥有的层级关系</strong><br>  -父(parent),子(child)和同胞(sibling)等术语用于扫描这些关系.父节点用于子节点,同级的子节点被称为同胞(兄弟)<br>  -在节点数中,顶端节点被称为根(root)<br>  -每个节点都有父节点,除了根(他没有父节点)<br>  -一个节点可拥有任意数量的子<br>  -同胞是拥有相同父节点的节点<br>  <img src="http://images2015.cnblogs.com/blog/1020990/201707/1020990-20170724202913606-469266009.png" alt="节点图"><br>  页面查找:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过 getElementById() 方法</span><br><span class="line">通过 getElementsByTagName() 方法</span><br><span class="line">通过使用 getElementsByClassName() 方法 </span><br><span class="line">通过使用 getElementsByName() 方法</span><br></pre></td></tr></table></figure></p><hr><p>onload:<br>这个属性的触发 标志着页面内容被加载完成.<br>应用场景:当有些事情我们希望页面加载完立刻执行,可以使用该事件属性<br>onsubmit:<br>当表单在提交时触发.该属性也只能给form元素使用.<br>应用场景:在表单提交前验证用户输入是否正确.如果验证失败,在该方法中我们应该阻止表单的提交.<br>Event 对象<br>代表事件的状态,比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p><p>事件通常与函数结合使用，函数不会在事件发生前被执行！event对象在事件发生时系统已经创建好了,并且会在事件函数被调用时传给事件函数.我们获得仅仅需要接收一下即可.</p><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**增加**</span><br><span class="line">createElement(name) 创建元素</span><br><span class="line">appendChild()  将元素追加</span><br><span class="line">**删除**</span><br><span class="line"><span class="number">1</span> 获得要删除的元素</span><br><span class="line"><span class="number">2</span> 获得他的父元素</span><br><span class="line"><span class="number">3</span> 使用removeChild () 方法删除</span><br></pre></td></tr></table></figure><p><strong>改</strong></p><p>1 使用上面的增和删结合完成修改<br>2  第二种  使用 setAttribute() 方法修改属性<br>使用innerHTML 属性修改元素内容</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &lt;strong&gt;Dom 对象关系:&lt;/strong&gt;&lt;br&gt;  &lt;img src=&quot;https://images2018.cnblogs.com/blog/1364550/201807/1364550-20180726192702227-1138070441.png&quot; a
      
    
    </summary>
    
      <category term="Dom" scheme="https://lipapasma.github.io/lipapa.github.io/categories/Dom/"/>
    
    
      <category term="JS  Dom" scheme="https://lipapasma.github.io/lipapa.github.io/tags/JS-Dom/"/>
    
  </entry>
  
  <entry>
    <title>Js 基础</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/24/JS%E5%9F%BA%E7%A1%80/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/24/JS基础/</id>
    <published>2018-07-24T12:53:16.623Z</published>
    <updated>2018-07-24T15:09:33.632Z</updated>
    
    <content type="html"><![CDATA[<p>-核心(ECMAScript)<br>-文档对象模型 (DOM) Document object model(整合js,css,html)<br>-浏览器对象模型(BOM) Broswer object model (整合JS和浏览器)</p><p><img src="https://0214-1256944971.cos.ap-shanghai.myqcloud.com/images/JS%E7%BB%93%E6%9E%84.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDhLrlmsZu2BS9qbuH7T02mvHrM4ZLQXZi%26q-sign-time%3D1532444966%3B1532446766%26q-key-time%3D1532444966%3B1532446766%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D7874cfec1b29823637aee0d50adacdd11523883d&amp;token=bba318659135e08ad4024f97bfa112a80f1e680710001&amp;clientIP=114.221.99.55&amp;clientUA=316099ea-2517-40f5-9a33-9a0a1b0edea7" alt="JS基础图"><br>-简单的数.ECMAScript 描述以下内容:</p><pre><code>- 语法 类型 语句 关键字 保留字 运算符 对象   [      - 1 封装       - 2 继承      - 3 多态]</code></pre><p> <strong>数据类型</strong><br>  <img src="https://0214-1256944971.cos.ap-shanghai.myqcloud.com/images/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%9B%BE.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKID6c6VyswU1JilakyJMNCK4e0SC5RlvdHy%26q-sign-time%3D1532444758%3B1532446558%26q-key-time%3D1532444758%3B1532446558%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Df75b88d3eea788d267aed321a65452b10f912a0b&amp;token=5d950fedc44b7910a6e89ec42ec1f6330ff0fb5910001&amp;clientIP=114.221.99.55&amp;clientUA=29940c93-d655-47f6-b58a-1b68d834834c" alt="数据类型图"></p><ul><li><p>基本数据类型   - Numeber —&gt; 数字类型 包括整型  浮点型  (整数和小数)</p><pre><code>- String  ---&gt; 字符串- Boolean ---&gt; 布尔型 ,ture/false- Undefined类型 --&gt; 该类型只有一个值,即undefined,当声明的变量未初始化时,该变量的默认值是undefined,当函数无明确返回值是,返回的也是undefined.- Null  ---&gt; 只有一个专用值 null ,用于表示尚未存在的对象,如果函数或者方法要返回的是对象,那么找不到该对象时,返回的通常是null.</code></pre><ul><li>引用数据类型 (复杂数据类型)    <pre><code>- 函数- 对象 - 数组</code></pre></li><li><p>类型查询函数 typeof  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span>(<span class="string">'test'</span>+<span class="number">3</span>)   &lt;!--  <span class="string">"string"</span>  --&gt;</span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>)       &lt;!--  <span class="string">"object"</span>  --&gt;</span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">true</span>+<span class="number">1</span>)     &lt;!--  <span class="string">"number"</span>  --&gt;</span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">true</span>-<span class="literal">false</span>) &lt;!--  <span class="string">"number"</span>  --&gt;</span><br></pre></td></tr></table></figure></li><li><p>运算符优先级</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      知识要点
    
    </summary>
    
      <category term="web" scheme="https://lipapasma.github.io/lipapa.github.io/categories/web/"/>
    
      <category term="JS基础" scheme="https://lipapasma.github.io/lipapa.github.io/categories/web/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="web" scheme="https://lipapasma.github.io/lipapa.github.io/tags/web/"/>
    
      <category term="JS" scheme="https://lipapasma.github.io/lipapa.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>原型是什么</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/24/my-first-blog/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/24/my-first-blog/</id>
    <published>2018-07-24T00:44:32.346Z</published>
    <updated>2018-07-25T04:50:40.045Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=25706282&auto=0&height=66"><br></iframe><br>在JavaScript中原型是一个prototype对象，用于表示类型之间的关系。<br> 原型链是针对构造函数的，比如我先创建了一个函数，然后通过一个变量new了这个函数，那么这个被new出来的函数就会继承创建出来的那个函数的属性，然后如果我访问new出来的这个函数的某个属性，但是我并没有在这个new出来的函数中定义这个变量，那么它就会往上（向创建出它的函数中）查找，这个查找的过程就叫做原型链。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span> ==&gt; 构造函数<span class="number">1</span> ==&gt; 构造函数<span class="number">2</span></span><br><span class="line">&lt;span style=<span class="string">"font-size:14px;"</span>&gt;varPerson=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.age=<span class="string">"匿名"</span>&#125;;</span><br><span class="line">varStudent=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//创建继承关系,prototype执行Person的一个实例对象</span></span><br><span class="line">Student.prototype=<span class="keyword">new</span>  Person();<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>原型API关系图<br><img src="http://images2015.cnblogs.com/blog/341820/201606/341820-20160610194715371-759828586.png" alt="原型图"><br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1532438261291&amp;di=e8d0c0383aea37427b26691f124b1240&amp;imgtype=0&amp;src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-7208c58973fa469891e6be970df3ff54_b.jpg" alt="原型图"><br><img src="https://www.newasp.net/attachment/article/2013-3/20133513150105.jpg" alt="原型继承"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__); <span class="comment">//A &#123;&#125;（即构造器function A 的原型对象）</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__.__proto__); <span class="comment">//Object &#123;&#125;（即构造器function Object 的原型对象）</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__.__proto__.__proto__); <span class="comment">//null</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在JavaScript中原型是一个prototype对象，用于表示类型之间的关系.
    
    </summary>
    
      <category term="JS高级" scheme="https://lipapasma.github.io/lipapa.github.io/categories/JS%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="概念" scheme="https://lipapasma.github.io/lipapa.github.io/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/23/hello-world/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/23/hello-world/</id>
    <published>2018-07-23T05:49:18.842Z</published>
    <updated>2018-07-26T13:21:21.934Z</updated>
    
    <content type="html"><![CDATA[<ul><li>安装完成后<br> 在命令行输入:</li></ul><ol><li><code>$git config --global user.name</code> “自定用户名”</li><li><code>t-config --gbobal user.email</code> “自定义邮箱”</li><li>每个机器都需要必须自报家门: 你的名字 和你的Email</li><li>git config 命令的 –global  用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</li></ol><p><strong>创建版本库</strong></p><p>###1. 第一步</p><p>   <code>$ mkdir learngit</code><br>    <code>$ cd learngit</code><br>    <code>$ pwd</code><br>    pwd命令用于显示当前目录   代码仓库位于/user/michael/learngit</p><p>###2.第二步<br>初始化一个Git仓库，使用git init命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git init </span><br><span class="line"></span><br><span class="line">Initalized emty Git repository in/user/michael/learngit/.git/</span><br></pre></td></tr></table></figure></p><p>瞬间git 就把仓库建好了,而且告诉你是一个空仓库<br>如果你没看到.git目录 是因为这个目录是默认隐藏, 用ls –ah 命令可以看见</p><p>###第三步，用命令git add告诉Git，把文件添加到仓库：<br>-先创建<br><code>$ touch readme.txt</code><br>-再 add  (将工作区文件提交到暂存区stage)<br><code>$ git add readme.txt</code><br>使用命令git add <file>，注意，可反复多次使用，添加多个文件；</file></p><p>-提交文件<br><code>$ git commit -m &quot;提交的备注信息 便于查找&quot;</code><br>使用命令git commit -m <message>，完成。</message></p><p>###第四步<br>-查看状态<br><code>$git status</code>  </p><p>##<br>-查看提交历史<br><code>$git log</code></p><p>##版本回退<br>-首先查看提交历史  复制版本号<br>-再输入以下命令<br><code>git reset --hard 版本号</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;安装完成后&lt;br&gt; 在命令行输入:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$git config --global user.name&lt;/code&gt; “自定用户名”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t-config --gbobal user.ema
      
    
    </summary>
    
      <category term="git" scheme="https://lipapasma.github.io/lipapa.github.io/categories/git/"/>
    
      <category term="node" scheme="https://lipapasma.github.io/lipapa.github.io/categories/git/node/"/>
    
    
      <category term="Git" scheme="https://lipapasma.github.io/lipapa.github.io/tags/Git/"/>
    
      <category term="node" scheme="https://lipapasma.github.io/lipapa.github.io/tags/node/"/>
    
  </entry>
  
</feed>
