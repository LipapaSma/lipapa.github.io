<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>空心话</title>
  
  <subtitle>闲来无事</subtitle>
  <link href="/lipapa.github.io/atom.xml" rel="self"/>
  
  <link href="https://lipapasma.github.io/lipapa.github.io/"/>
  <updated>2018-08-08T00:59:37.313Z</updated>
  <id>https://lipapasma.github.io/lipapa.github.io/</id>
  
  <author>
    <name>Lipapa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue入门</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/08/07/vue%E5%85%A5%E9%97%A8/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/08/07/vue入门/</id>
    <published>2018-08-07T15:04:27.000Z</published>
    <updated>2018-08-08T00:59:37.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是mvvm"><a href="#什么是mvvm" class="headerlink" title="什么是mvvm"></a>什么是mvvm</h2><ul><li>M =&gt; Model(数据模型)</li><li>V =&gt; view(视图模型,负责将数据模型转换成ui展现出来,就是DOM解构)</li><li>VM =&gt; ViewModel(一个同步View和Model的对象)<h2 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a>Vue常用指令</h2></li></ul><ol><li><strong>v-text</strong><br>可以将一短文本渲染到指定元素中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">'add'</span> v-text=<span class="string">'mod'</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"> new Vue (&#123;   </span></span><br><span class="line"><span class="regexp">    el: "#add"</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">          mod:"要渲染的文字"</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">页面显示的就是  mod里面的字符串</span></span><br></pre></td></tr></table></figure><p>1.<strong>v-html</strong> </p><p>差值表达式和v-text会将数据解释为纯文本，而非 HTML 。<br>  为了输出真正的 HTML ，你需要使用 v-html 指令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div v-html=<span class="string">'msg'</span>&gt;</span><br><span class="line">  </span><br><span class="line">   &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">   new Vue (&#123;</span></span><br><span class="line"><span class="regexp">     el:   </span></span><br><span class="line"><span class="regexp">     data: &#123;</span></span><br><span class="line"><span class="regexp">       msg:"&lt;h2&gt; 文字 &lt;/</span>h2&gt;<span class="string">"</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">   &#125;)</span></span><br><span class="line"><span class="string">//被插入的内容都会被当做 HTML,但是对于没有HTML标签的数据绑定时作用同v-text和&#123;&#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure><ol><li><strong>v-bind</strong></li></ol><ul><li>作用:可以给html元素或者组件动态绑定一个或者朵儿特性 .例如动态绑定Style和Class</li><li><p>例:</p><p>v-bind: 可简写为 ‘:’<br>1.img的Src从imgSrc中取得 地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src=<span class="string">"imgSrc"</span> &gt;</span><br></pre></td></tr></table></figure><p>2.从classA和classB两个变量的值作为class值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[classA,classB]"</span> &gt; <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>结果是 <div class="A B"> </div><br>3.data中设置数据  isRed 变量如果是true 则class值就为red,否则就没有 , class= red   在CSS样式中已经添加color = red; 类名为red;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;red:isRed&#125;"</span> &gt; <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>4.div的class数据值一定有classA变量的值.而是否有ClassB和ClassC 取决于变量 isB和isC是否是true ,两者一一对应<br>例:</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;classA,[classB:isB,classC:isC]&#125;"</span>&gt;数组对象 &lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p> 5.变量加常量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style=<span class="string">"&#123;fontSize:size+'px'&#125;"</span>&gt;  <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p> 6.变量加常量第二中写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img  v-bind=<span class="string">"&#123;src:imgSrc+'?v=1.0'&#125;"</span>&gt;</span><br></pre></td></tr></table></figure></p><p> 7.对象数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style=<span class="string">"[styleObjectA, styleObjectB]"</span>&gt;styleObjectA, styleObjectB&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue (&#123;</span><br><span class="line">   el:</span><br><span class="line">   data &#123;</span><br><span class="line">     classA: <span class="string">"A"</span>, <span class="comment">// 放类名</span></span><br><span class="line">     classB: <span class="string">"B"</span>,  / 类名</span><br><span class="line">     isRed:  <span class="literal">true</span>, <span class="comment">//布尔值</span></span><br><span class="line">     isB: <span class="literal">true</span></span><br><span class="line">     isC: <span class="literal">true</span>,</span><br><span class="line">     styleObjactA : &#123; <span class="attr">fontSize</span>:<span class="string">'20px'</span>&#125;,</span><br><span class="line">     styleObjactB : &#123; <span class="attr">fontSize</span>:<span class="string">'20px'</span>&#125;, <span class="comment">//放样式</span></span><br></pre></td></tr></table></figure><p> 2.<strong>v-for</strong></p><p><em>语法</em> :<br><br>item in Array <br><br>(item,index) in Array <br><br>value in obj<br><br>(val,key,index) in obj <br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> &lt;p v-<span class="keyword">for</span> =<span class="string">"item in obj"</span>&gt; </span><br><span class="line">  &#123;&#123; item.name&#125;&#125;</span><br><span class="line"> &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">2.&lt;p v-for="(item,index) in obj" :key ="index"&gt;</span></span><br><span class="line"><span class="regexp">  &#123;&#123;item.name&#125;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>P&gt;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"><span class="number">3.</span>&lt;p v-<span class="keyword">for</span> =<span class="string">"vlaue in bos"</span>&gt;</span><br><span class="line">  &#123;&#123;value&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">4.&lt;p v-for="(val,key,index) in bos " &gt;****</span></span><br><span class="line"><span class="regexp">     &#123;&#123;index&#125;&#125; : &#123;&#123;key&#125;&#125; :&#123;&#123;val&#125;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>p&gt;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">new</span> Vue (&#123;</span><br><span class="line">    el:</span><br><span class="line">     data : &#123;</span><br><span class="line">     obj :[ &#123;<span class="attr">name</span>:<span class="string">'xx'</span>&#125;</span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">'zz'</span>&#125;</span><br><span class="line">           ],</span><br><span class="line">     bos &#123;</span><br><span class="line">       name:<span class="string">'dd" &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong> <br><br>以下变化是不会触发更新:<br><br>1.通过索引给数组设置新的值<br><br>2.通过length改变数组长度<br><br><strong>解决</strong><br><br>1.Vue.set(arr,index,newVue)<br><br>2.arr.splice(index,1,newVue)<br></p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model ##"></a>v-model ##<br></h2><p>1.在表单控件上或则组件上创建双向绑定<br><br>2.v-model只能在如下元素中使用:<br><br> <code>input</code> <code>select</code> <code>textarea</code> <code>compeonents</code>(vue组件)<br></p><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>1 文档地址:<a href="https://cn.vuejs.org/v2/guide/events.html#键值修饰符" title="文档地址" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/events.html#键值修饰符</a> <br><br>在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 v-on 在监听键盘事件时添加按键修饰符 (缩写 <code>@</code>) <br><br><code>.enter</code> <br><br><code>.tap</code>, <br><br><code>.delete</code> (捕获 “删除” 和 “退格” 键) <br><br><code>.esc</code> <br><br><code>.up  , .down , .left  , .right</code> <br></p><p><strong>可以自定义按键名</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Vue2.0版本中扩展一个f1的按键修饰符写法：</span></span><br><span class="line">Vue.config.keyCodes.f1 = <span class="number">112</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;button @keyup.f1=<span class="string">"someFunc"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="v-if-和-v-show"><a href="#v-if-和-v-show" class="headerlink" title="v-if 和 v-show"></a>v-if 和 v-show</h2><p><strong>v-if</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">1</span>、作用：根据表达式的值的真假条件来决定是否渲染元素，如果条件为<span class="literal">false</span>不渲染（达到隐藏元素的目的），为<span class="literal">true</span>则渲染。在切换时元素及它的数据绑定被销毁并重建</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>、示例：</span><br><span class="line">    &lt;!-- Handlebars 模板 --&gt;</span><br><span class="line">    &#123;&#123;#if isShow&#125;&#125;</span><br><span class="line">      &lt;h1&gt;Yes&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123;/i</span>f&#125;&#125;</span><br><span class="line"></span><br><span class="line">    通常我们使用写法居多：</span><br><span class="line">    &lt;h1 v-<span class="keyword">if</span>=<span class="string">"isShow"</span>&gt;Yes&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    也可以用 v-else 添加一个 “else” 块：</span></span><br><span class="line"><span class="regexp">    &lt;h1 v-if="isShow"&gt;Yes&lt;/</span>h1&gt;</span><br><span class="line">    &lt;h1 v-<span class="keyword">else</span>&gt;No&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    注意：v-else 元素必须紧跟在 v-if 元素否则它不能被识别。</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        data:&#123;</span></span><br><span class="line"><span class="regexp">          isShow:true</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">```     </span></span><br><span class="line"><span class="regexp">**v-show**</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">```html</span></span><br><span class="line"><span class="regexp">  1、根据表达式的真假值，切换元素的 display CSS 属性，如果为false，则在元素上添加 display:none来隐藏元素，否则移除display:none实现显示元素</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  2、示例：</span></span><br><span class="line"><span class="regexp">      &lt;h1 v-show="isShow"&gt;Yes&lt;/</span>h1&gt;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">          data:&#123;</span><br><span class="line">            isShow:<span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>、v-<span class="keyword">if</span>和v-show的总结：</span><br><span class="line">      v-<span class="keyword">if</span>和v-show 都能够实现对一个元素的隐藏和显示操作,但是v-<span class="keyword">if</span>是将这个元素添加或者移除到dom中，而v-show</span><br><span class="line">      是在这个元素上添加 style=<span class="string">"display:none"</span>和移除它来控制元素的显示和隐藏的</span><br></pre></td></tr></table></figure></p><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、根据表达式的真假值，切换元素的 display CSS 属性，如果为false，则在元素上添加 display:none来隐藏元素，否则移除display:none实现显示元素</span><br><span class="line"></span><br><span class="line">2、示例：</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        data:&#123;</span><br><span class="line">          isShow:true</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">3、v-if和v-show的总结：</span><br><span class="line">    v-if和v-show 都能够实现对一个元素的隐藏和显示操作,但是v-if是将这个元素添加或者移除到dom中，而v-show</span><br><span class="line">    是在这个元素上添加 style="display:none"和移除它来控制元素的显示和隐藏的</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Vue基础
    
    </summary>
    
    
      <category term="vue" scheme="https://lipapasma.github.io/lipapa.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>数组综合方法</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/08/07/%E6%95%B0%E7%BB%84%E7%BB%BC%E5%90%88%E6%96%B9%E6%B3%95/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/08/07/数组综合方法/</id>
    <published>2018-08-07T00:56:27.000Z</published>
    <updated>2018-08-07T15:05:20.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组转换对象"><a href="#数组转换对象" class="headerlink" title="数组转换对象"></a>数组转换对象</h2><p>1.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  a  =[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">var</span>  obj=&#123;&#125;</span><br><span class="line">a.forEach(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123; obj[index] = item &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure></p><p>2.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"> <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> a)  &#123;</span><br><span class="line"> obj[key]=a[key]</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(abj) <span class="comment">// &#123;0:'a',1:'b',2:'c'&#125;</span></span><br></pre></td></tr></table></figure></p><p>3.<em>es6 解构赋值</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">let</span> obj =&#123;...a&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      数组的常用方法 偏门方法汇总
    
    </summary>
    
    
      <category term="Array 引用数据类型" scheme="https://lipapasma.github.io/lipapa.github.io/tags/Array-%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/08/05/promise/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/08/05/promise/</id>
    <published>2018-08-05T10:33:14.000Z</published>
    <updated>2018-08-07T00:50:44.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p> <strong>Promise的含义</strong><br> <code>promise</code>是异步编程的一种解决方案.所谓<code>promise</code>,就是一个容器,里面保存着未来才会结束的事件(通常是一个异步操作)的结果,从语法上<code>Promise</code>是一个对象,从它可以获取异步操作的消息.<br><code>Promise</code>对象的状态不受外界影响.</p><p><strong>三种状态:</strong></p><ul><li>pending:进行中</li><li>resolve:已经成功 </li><li>reject:已经失败</li></ul><p><strong>基本用法:</strong></p><p>es6规定,<code>Promise</code>对象是一个构造函数,用来生成Promise实例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promist = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      type:<span class="string">'get'</span>,</span><br><span class="line">      url:<span class="string">'url'</span>,</span><br><span class="line">      data:<span class="string">'data'</span>,</span><br><span class="line">     success:<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">         &#125;,</span><br><span class="line">      error:<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">       reject(err)</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure></p><p> promise 正常是不会暴露在外面,必须要用函数封装起来</p><p><strong>实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax 回调嵌套  回调地狱 </span></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">      url:url,</span><br><span class="line">      data:data,</span><br><span class="line">      success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; </span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">             <span class="comment">//....</span></span><br><span class="line">            &#125;)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> ....</span><br><span class="line"><span class="comment">// 优化回调,封装函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">pajax</span>(<span class="params">url,data</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">           type:<span class="string">'get'</span>,</span><br><span class="line">           url:url,</span><br><span class="line">           data:data,</span><br><span class="line">           success:<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">              resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            error:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">              reject(<span class="string">'错误提示'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   pajax(url,data)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//..... </span></span><br><span class="line">        <span class="keyword">return</span> pajax(url,data)</span><br><span class="line">        &#125;</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//..... </span></span><br><span class="line">        <span class="keyword">return</span> pajax(url,data)</span><br><span class="line">        &#125;</span><br><span class="line">       .catch( <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>Promise.all方法</strong></p><p>all 是Promise 对象上的方法,实例不能使用,这个方法通过了并行执行异步操作的能力没并且在所有的异步操作完成后才执行回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; resolve(<span class="string">'Hello'</span>);  &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; resolve(<span class="string">'World'</span>);  &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"> <span class="built_in">Promise</span>.all([p1,p2]).then(<span class="function">(<span class="params">result</span>)=&gt;</span> &#123;</span><br><span class="line">  consloe.log(retult)  <span class="comment">// 数组["Hello","World"]</span></span><br><span class="line">  <span class="built_in">console</span>.log(result[<span class="number">0</span>] + result[<span class="number">1</span>]);  <span class="comment">//字符串HelloWorld</span></span><br><span class="line"> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>从例子中科院看出,虽然P2(3s)的速度比P1(1S)快,但是Promise.all方法会按照数组中的顺序降级结果返回.日常开发经常刅这种需求,在不同的接口请求数据然后合成自己所需要的数据,通常这些接口之间没有关联,即前一个接口的数据不作为后一个接口的参数,这时候Promise.all方法就派上用场</strong><br>注:还有一个和Promise.all相类似的方法Promise.race，它同样接收一个数组作为参数，不同的是只要该书组中的Promise对象的状态发生变化（无论是resolve还是reject），该方法都会返回</p><p><strong>Promise.race的使用</strong><br> 顾名思义,Promse.race就是 Promise.race([p1,p2,p3])里面谁的结果获得的快,就返回那个结果,不管结果本身是成功状态还是失败状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       resolve(<span class="string">'成功'</span>)</span><br><span class="line">       &#125;,<span class="number">1000</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">   <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       reject(<span class="string">'错误的'</span>)</span><br><span class="line">       &#125;,<span class="number">500</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">   <span class="built_in">Promise</span>.race([p1,p2]).then(<span class="function">(<span class="params">resul</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(result)</span><br><span class="line">   &#125;).catch (<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)   <span class="comment">//打开是'错误的' 字符串</span></span><br><span class="line"> &#125;)</span><br><span class="line"><span class="comment">//个人理解: 在多个不同服务器放置图片...等网页需要ajax读取的数据, 根据哪里服务器响应速度, 让读取时间短的 优先返回给用户,优化网页响应速度</span></span><br></pre></td></tr></table></figure><h2 id="ajax方法及参数"><a href="#ajax方法及参数" class="headerlink" title="ajax方法及参数"></a>ajax方法及参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  $.when(</span><br><span class="line">    $.ajax(<span class="string">'url'</span>),</span><br><span class="line">    $.ajax(<span class="string">'url2'</span>)</span><br><span class="line">  )</span><br><span class="line"> .then(successCallback,failCallback);</span><br><span class="line">  <span class="comment">//回调函数会在2个ajax都完成的情况下才会执行</span></span><br><span class="line"> 注：$.ajax(‘url’) 返回的是一个<span class="built_in">Promise</span>对象</span><br><span class="line"> 动画:</span><br><span class="line"> <span class="comment">// 这也是回调嵌套</span></span><br><span class="line"><span class="comment">// 在前一个动画执行完成后，紧接着执行下一个动画</span></span><br><span class="line">$(<span class="string">'xx'</span>).animate(&#123;xxxx&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'xx'</span>).animate(&#123;xx&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><strong>async</strong></p><ul><li>类型 : Boolean</li><li>默认值:true.默认设置下,所有请求均为异步请求,如需发同步请求,请将此选   项设置为false</li></ul><p><strong>timeout</strong></p><ul><li>类型:number;</li><li>默认值: 为0,</li><li>设置timeout的时间，通过检测complete时status的值判断请求是否超时，如果超时执行响应的操作。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   var ajaxTimeoutTest = $.ajax(&#123;</span><br><span class="line">　　url:&apos;&apos;,  //请求的URL</span><br><span class="line">　　timeout : 1000, //超时时间设置，单位毫秒</span><br><span class="line">　　type : &apos;get&apos;,  //请求方式，get或post</span><br><span class="line">　　data :&#123;&#125;,  //请求所传参数，json格式</span><br><span class="line">　　dataType:&apos;json&apos;,//返回的数据格式</span><br><span class="line">　　success:function(data)&#123; //请求成功的回调函数</span><br><span class="line">　　　　alert(&quot;成功&quot;);</span><br><span class="line">　　&#125;,</span><br><span class="line">　　complete : function(XMLHttpRequest,status)&#123; //请求完成后最终执行参数</span><br><span class="line">　　　　if(status==&apos;timeout&apos;)&#123;//超时,status还有success,error等值的情况</span><br><span class="line"> 　　　　　 ajaxTimeoutTest.abort();</span><br><span class="line">　　　　　  alert(&quot;超时&quot;);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>abort</strong></p><ol><li>停止JQ中的ajax请求用abort()函数<br><em>封装abort方法</em></li></ol><ul><li>用于随时调用  面向对象思想</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">需求:</span><br><span class="line">怎么用一个方法终止本页面的所有ajax请求？abort一个ajax对象调用一次五个ajax就需要 五个ajax调用五次abort?</span><br><span class="line"><span class="keyword">var</span> ajaxs = [];</span><br><span class="line"><span class="keyword">var</span> oldAjax = $.ajax;</span><br><span class="line"></span><br><span class="line">$.ajax = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> ajax = oldAjax.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    ajaxs.push(ajax);</span><br><span class="line">    <span class="keyword">return</span> ajax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增abortAll函数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abortAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.each(ajaxs, <span class="function"><span class="keyword">function</span>(<span class="params">i, ajax</span>) </span>&#123;</span><br><span class="line">        ajax.abort();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改$.ajax方法 </span></span><br><span class="line">这样不用没出调用都修改,取消时,只需要调用abortAll() 就可以;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      promise入门
    
    </summary>
    
    
      <category term="es6 promise" scheme="https://lipapasma.github.io/lipapa.github.io/tags/es6-promise/"/>
    
  </entry>
  
  <entry>
    <title>综合概念</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/08/01/%E7%BB%BC%E5%90%88%E6%A6%82%E5%BF%B5/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/08/01/综合概念/</id>
    <published>2018-08-01T00:47:58.000Z</published>
    <updated>2018-08-05T13:29:35.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span>  arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">element,index,array</span>)=&gt;</span> &#123;</span><br><span class="line">    element: 指定当前元素的值</span><br><span class="line">    index: 当前索引</span><br><span class="line">    array: <span class="built_in">Array</span>对象本身</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="each语法"><a href="#each语法" class="headerlink" title="each语法"></a>each语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span>  arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"> arr.each(<span class="function">(<span class="params">index,element</span>) =&gt;</span> &#123;</span><br><span class="line">      index  当前索引</span><br><span class="line">      element 当前的元素 也可以使用<span class="keyword">this</span> 选择器</span><br><span class="line">   &#125;)</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p><strong>$().each方法主要用于dom遍历,该方法规为每个元素规定运行的函数</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果页面有多高Input标签类型诶checkbox ,对于$().each来处理多高checkbox; </span></span><br><span class="line">$(<span class="string">"input[name='on']"</span>).each ( <span class="function"><span class="params">i</span> =&gt;</span>   <span class="keyword">if</span>($(<span class="keyword">this</span>).attr(<span class="string">'checked'</span>) ==<span class="literal">true</span>   &#123;</span><br><span class="line">   <span class="comment">// 选中 操作代码</span></span><br><span class="line">   &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>$.each()函数</strong></p><ol><li>$.each()函数不同于JQuery对象的each()方法，它是一个全局函数，不操作JQuery对象，<br>而是以一个数组或者对象作为第1个参数，以一个回调函数作为第2个参数。<br>回调函数拥有两个参数：第1个为对象的成员或数组的索引，第2个为对应变量或内容</li></ol><p><strong>遍历数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.each([&#123;“name”:”limeng”,”email”:”xfjylimeng”&#125;,&#123;“name”:”hehe”,”email”:”xfjylimeng”&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">i,n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">alert(“索引:”+i,”对应值为：”+n.name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>参数i 为遍历的索引值  n 为当前遍历的对象</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol><li>作用域<br><strong>变量作用域</strong> : <br><br>-</li></ol><ul><li>全局变量  </li><li>局部变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> scope = <span class="string">"global"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(scope);<span class="comment">//result:undefined</span></span><br><span class="line">       <span class="keyword">var</span> scope = <span class="string">"local"</span>;</span><br><span class="line">       <span class="built_in">console</span>.log(scope);<span class="comment">//result:local;</span></span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">*<span class="comment">//函数解析变量提前声明*</span></span><br></pre></td></tr></table></figure><ol start="2"><li>作用域链<br><img src="https://img-blog.csdn.net/20170430104545087" alt="作用域链"><br>标识符解析是沿着作用域链一级一级地搜索标识符地过程。搜索过程始终从作用域链地前端开始，然后逐级向后回溯，直到找到标识符为止（如果找不到标识符，通常会导致错误发生）—-《JavaScript高级程序设计》<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><strong>作用:</strong></li><li>可以读取自身函数外部的变量(沿着作用域链查找)</li><li>让外部变量始终保存在内存中 不会被垃圾回收机制回收!(网页关闭才会销毁) 可用于定义私有变量</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">var</span>  a = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   a++</span><br><span class="line">   <span class="built_in">console</span>.log(a)</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">return</span> fn2</span><br><span class="line">&#125;</span><br><span class="line">fn()()   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>关于this对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'windows'</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   name:<span class="string">'my obj'</span>,</span><br><span class="line">   getName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> alert(obj.getName()())    <span class="comment">// windows</span></span><br><span class="line">  匿名函数具有全局性.所有<span class="keyword">this</span>通常指向<span class="built_in">window</span>;</span><br></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p><strong>递归函数就是在函数内部调用自己</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">  ruturn n*fn(n<span class="number">-1</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   fn(<span class="number">4</span>)   </span><br><span class="line">  <span class="number">4</span>*fn(<span class="number">4</span><span class="number">-1</span>)</span><br><span class="line">  ...   如果 n == <span class="number">1</span> 那么  fn(值就是<span class="number">1</span>) </span><br><span class="line">          <span class="number">1</span>*<span class="number">1</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">递归就是自己调用自己</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"> 将递归解构转换成递归体</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(n<span class="number">-1</span>) + n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      js高级
    
    </summary>
    
    
      <category term="作用域 闭包 递归" scheme="https://lipapasma.github.io/lipapa.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F-%E9%97%AD%E5%8C%85-%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>解构赋值深入理解</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/30/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/30/解构赋值深入理解/</id>
    <published>2018-07-30T00:48:25.000Z</published>
    <updated>2018-07-30T11:57:35.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="keyword">let</span> [a,b,c] =fn();</span><br><span class="line"> <span class="built_in">console</span>.log(a,b,c); <span class="comment">// 1  2  3</span></span><br><span class="line"> <span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"> **嵌套多层** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"> <span class="keyword">let</span> [a,[b,[c]]] = [<span class="number">1</span>,[<span class="number">2</span>[<span class="number">3</span>]]]</span><br><span class="line"> <span class="built_in">console</span>.log(a)  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>解构不成功,但模式匹配了,相应值为undefined</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>[a,b] =[<span class="number">1</span>]</span><br><span class="line">a<span class="comment">//  1</span></span><br><span class="line">b<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p><strong>使用<code>...</code>这个扩展运算符,匹配余下的所以值,形成一个数组(匹配不上则为[] )</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>[a,...b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// [2,3]</span></span><br><span class="line"><span class="keyword">let</span> [a,...b] = [<span class="number">1</span>]</span><br><span class="line">a <span class="comment">//1</span></span><br><span class="line">b  <span class="comment">//[]</span></span><br></pre></td></tr></table></figure></p><p><strong>可设置默认值,当相应的值严格等于Undefined,默认值生效</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>[a,b=[<span class="number">1</span>,<span class="number">2</span>]] = [<span class="number">1</span>]</span><br><span class="line"> a <span class="comment">//1</span></span><br><span class="line"> b  <span class="comment">// [2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a ,b =[<span class="number">2</span>,<span class="number">3</span>] ] =[<span class="number">1</span>,<span class="literal">undefined</span>];  <span class="literal">undefined</span> 未定义</span><br><span class="line">a  <span class="comment">// 1 </span></span><br><span class="line">b  <span class="comment">// [2,3]</span></span><br><span class="line"><span class="keyword">let</span> [a,b =[<span class="number">2</span>,<span class="number">3</span>]] = [<span class="number">1</span>,<span class="literal">null</span>]   默认值就为空</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// null</span></span><br></pre></td></tr></table></figure></p><p><strong>类似于数组,也可以设置默认值</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:b= <span class="number">2</span>&#125; =&#123;</span><br><span class="line">   a:<span class="number">1</span>     <span class="comment">// a 是键   b是值  默认是2  重新赋值为1  则b就是 1</span></span><br><span class="line"> &#125;</span><br><span class="line"> b  <span class="comment">//1</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">**因为数组实际上也是对象** </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"> <span class="keyword">let</span>&#123;<span class="attr">a</span>:one,<span class="attr">b</span>:two&#125; = [<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"> 作为对象b 的值是  two  <span class="comment">//6</span></span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 字符串解构赋值 ##</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"> <span class="keyword">let</span> [a,b] = <span class="string">'str'</span></span><br><span class="line">   a  <span class="comment">// 's'</span></span><br><span class="line">   b <span class="comment">// 't' </span></span><br><span class="line"> <span class="keyword">let</span>&#123;<span class="number">0</span>:a,<span class="number">1</span>:b,<span class="attr">length</span>:len&#125;  = <span class="string">'str'</span></span><br><span class="line"> a  <span class="comment">// s</span></span><br><span class="line"> b  <span class="comment">// t</span></span><br><span class="line"> len  <span class="comment">// 3</span></span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string">**默认值 解构赋值允许指定默认值**</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"> <span class="keyword">let</span>[a,b=<span class="string">'zz'</span>] = [<span class="string">'sss'</span>]</span><br><span class="line"> a  <span class="comment">// sss</span></span><br><span class="line"> b <span class="comment">// zz  </span></span><br><span class="line"> <span class="keyword">let</span> [a,b=<span class="string">'zz'</span>] = [<span class="string">'sss'</span>,<span class="literal">undefined</span>]</span><br><span class="line"> <span class="comment">//  b = zz </span></span><br><span class="line"> !注:<span class="number">1.</span>数组成员为<span class="literal">undefined</span>时，默认值仍会生效(因为在ES6内部使用严格相等运算符‘===‘，判断一个位置是否有值，所以当一个数组成员严格等于<span class="literal">undefined</span>,默认值才会生效)</span><br><span class="line">  <span class="number">2.</span> <span class="string">`如果一个数组成员是null,那么默认值不会生效 ,因为null 不严格等于undefined;`</span></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">## 函数参数的解构 ##</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">&#123;x=<span class="number">1</span>,y=<span class="number">2</span>&#125; =&#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x.y]</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(move(&#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">4</span>&#125;))  <span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure></p><h2 id="let的特点"><a href="#let的特点" class="headerlink" title="let的特点"></a>let的特点</h2><ol><li><strong>不能重复声明</strong> var重复声明会被覆盖,但let重复声明会报错;</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a  = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> a  = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>   /uncaught syntaxError:Identifier <span class="string">'bb'</span> has already benn declared; 报错</span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string">1. **不存在变量提升** 以下做法会报错</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined </span></span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="string">``</span><span class="string">`      </span></span><br><span class="line"><span class="string">1. **存在暂时性死区**  只要块级作用域内存在let的声明,它所声明的变量就'绑定'这个区域 不在受外部的影响</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)  &#123;</span><br><span class="line">a = <span class="number">1</span>;  <span class="comment">// a is not defined </span></span><br><span class="line"><span class="keyword">let</span> a;   </span><br><span class="line">&#125; </span><br><span class="line"><span class="string">``</span><span class="string">` &lt;br&gt;</span></span><br><span class="line"><span class="string">2. **let与window对象脱钩**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b)</span><br></pre></td></tr></table></figure><h2 id="const的常量声明"><a href="#const的常量声明" class="headerlink" title="const的常量声明"></a>const的常量声明</h2><p>1.<code>const</code>声明了一个只读的常量,常量,即值不可更改.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> max =<span class="number">10</span> ;</span><br><span class="line">max = <span class="number">11</span>  <span class="comment">//Uncaught TypeError: Assignment to constant variable. 报错</span></span><br></pre></td></tr></table></figure></p><p>1)<code>const</code>一旦声明变量,就必须立刻初始化,否则报错<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX;  <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration 报错</span></span><br></pre></td></tr></table></figure></p><p>2)<code>const</code>声明的引用类型<br><code>const</code>声明的引用类型,引用类型的地址不能更改,但其指向的值是可以的,如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj =  &#123; </span><br><span class="line">   a:<span class="number">10</span></span><br><span class="line">  &#125;;</span><br><span class="line"> obj.a = <span class="number">11</span> </span><br><span class="line">  <span class="built_in">console</span>.log(obj.a)   <span class="comment">// 11  </span></span><br><span class="line">** 也可以给<span class="keyword">const</span> 传递空对象 向空对象的内存地址中传值,不改变内存地址即可;**</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Es6
    
    </summary>
    
    
      <category term="es6  解构赋值" scheme="https://lipapasma.github.io/lipapa.github.io/tags/es6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>CommonJs规范</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/30/COMMONjs%E8%A7%84%E8%8C%83/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/30/COMMONjs规范/</id>
    <published>2018-07-29T16:20:45.000Z</published>
    <updated>2018-07-29T16:44:01.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="commonJS-规范"><a href="#commonJS-规范" class="headerlink" title="commonJS 规范"></a>commonJS 规范</h2><ol><li>什么是commonjs 规范? <br><br>commonjs 是为了实现Jacascript的模块化,而制定的一套规范</li></ol><ol start="2"><li>为什么Jacascript 需要模块化? <br><br>简化代码的结构,提升代码的效率,就是代码复用<br>可以让一个js 文件内的<em>方法</em> <em>函数</em> 单独来回引用!</li><li>优缺点:<br>可维护性;灵活架构,焦点分离;<br>方便模块间组合,分解;多人协作互不干扰<br>根据commonJS规范,一个单独的文件就是一个模块,每一个模块都是一个单独的作用域,也就是在一个文件定义的变量(包括函数和类),都是私有的,对其他文件是不可见的!</li><li>Commonjs规定,每个文件的对外接口是module.exports对象.这个对象的所有;<br>2.<code>module</code>对象:在每一个模块中,<code>module</code>对象代表该模块自身,<br><code>exports</code>属性:是<code>module</code>对象的一个属性,他向外提供接口;</li></ol><p>例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span>  add  = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">ruturn a +x ;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in">module</span>.exports.x  = x;</span><br><span class="line"> <span class="built_in">module</span>.exports.add = add;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面代码通过<span class="built_in">module</span>.exports对象,定义了对外接口,输出变量X 和函数add, <span class="built_in">module</span>.exports对象是可以被其他文件导入,起始就是文件内部和外部通信的桥梁;</span><br><span class="line">conts  a  = <span class="built_in">require</span>(<span class="string">'./xxx.js'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a.x) <span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">3</span>)) <span class="comment">//8</span></span><br></pre></td></tr></table></figure></p><h2 id="Packages-包"><a href="#Packages-包" class="headerlink" title="Packages 包"></a>Packages 包</h2><ol><li>包的目的就是基于commonJS规范实现的应用程序或类库;</li><li>包可以看做是模块,代码和其他资源组合起来的形成的独立作用域;<br><strong>规范的包结构</strong></li></ol><ol><li><code>package.json</code>必须在包的顶层目录下;</li><li><code>package.json</code>文件必须符合json格式,并且必须包含如下三个属性<br><br></li></ol><ul><li><code>name</code>:包的名字  名称必须唯一</li><li><code>version</code>:包的版本号  </li><li><code>main</code>:表示包的入口文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- +bin   二进制文件在Bin目录下</span><br><span class="line">- +lib   Javascript 在lib目录下</span><br><span class="line">- +doc  文档在doc目录下</span><br><span class="line">- +test 单元测试在test目录</span><br><span class="line">- +<span class="string">`package.json`</span>在顶层目录下</span><br></pre></td></tr></table></figure><p><strong>包描述文件 package.json</strong></p><ul><li><code>name</code>: 名称必须唯一</li><li><code>description</code>:包的简要说明</li><li><code>version</code>:符合语义化版本识别规范的版本字符串</li><li><code>keywords</code>:关键字数据.通常用于搜索</li><li><code>maintainers</code>:维护者数组.每个元素要包含name,email,web可选字段</li><li><code>contributors</code>:贡献者数组,格式和maintainers相同,包的作者应该是贡献者数据的第一个元素</li><li><code>bugs</code>:提交bug的地址.可以是网址或电子邮件地址</li><li><code>licenses</code>:许可证数组,每个元素要包含的type和url字段;</li><li><code>repositories</code>:仓库托管地址数组,每个元素要包含type,Url和path字段;</li><li><code>dependencies</code>:包的依赖,一个关联数组.由包名称和版本号组成</li><li><code>devDepencies</code>:开发依赖项,表示一个包在开发期间用到的依赖项</li></ul>]]></content>
    
    <summary type="html">
    
      node Commonjs
    
    </summary>
    
    
      <category term="commonJS" scheme="https://lipapasma.github.io/lipapa.github.io/tags/commonJS/"/>
    
      <category term="package.json" scheme="https://lipapasma.github.io/lipapa.github.io/tags/package-json/"/>
    
  </entry>
  
  <entry>
    <title>Node基础</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/27/node-%E5%9F%BA%E7%A1%80/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/27/node-基础/</id>
    <published>2018-07-27T06:23:33.000Z</published>
    <updated>2018-07-29T12:02:27.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>node JS 是什么 </li><li>一个js运行时环境 (不是一门语言/库/框架)</li><li>1.node.js中的Javascript没有BOM DOM 只有EcmaScript(基本语法), 因为服务器不操作页面</li><li><p>2.在Node这个JavaScript 执行环境中为js提供一些服务器级别的操作Api 文件读写 构建网络服务, 网络通信 http服务</p><p><strong>特性</strong><br>使用时间驱动,实现异步,轻量高效</p></li></ul><h2 id="Es6-常用语法"><a href="#Es6-常用语法" class="headerlink" title="Es6 常用语法"></a>Es6 常用语法</h2><p> <strong>let 与const</strong></p><p>-var 关键字 缺点 1.变量名提升 2.没有块级作用域</p><p>-let 特性 :</p><ul><li>没有变量的提升</li><li>有{} 作用域</li></ul><p>const 特性:</p><ul><li>没有变量提升的问题</li><li>const 定义的常量,无法被重新赋值</li><li>当定义常量的时候,必须定义且初始化 .否则报语法错误  定义一个默认值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 和<span class="keyword">const</span> 都是块级作用域</span><br><span class="line">&#123;&#125;大括号内的代码亏即为<span class="keyword">let</span> 和<span class="keyword">const</span> 的作用域</span><br><span class="line"><span class="keyword">const</span> = &#123;&#125;;</span><br><span class="line">改内存地址 不改值 不会报错;</span><br><span class="line">例:</span><br><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">name</span>:<span class="string">'cc'</span>&#125;;</span><br><span class="line">a.name =<span class="string">'cc'</span> <span class="comment">// 不会报错</span></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="attr">name</span>:<span class="string">'cc'</span>&#125;  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>解构赋值</strong> <br><br>所谓解构赋值 就是把某个对象中的属性当做变量 给解放出来,以后就能够当做变量直接使用 <br><br>可以使用<code>&#39; : &#39;</code>为解构出来的变量重命名  <br><br>主要用在 数组和对象上 <br><br>实例: <br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">name :<span class="string">'解构赋值案例'</span>,</span><br><span class="line">age : <span class="number">24</span>,</span><br><span class="line">sex : <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age,sex&#125; =parson</span><br><span class="line"><span class="built_in">console</span>.log(age)  <span class="comment">// 24</span></span><br></pre></td></tr></table></figure></p><p><br><br>使用解构赋值表达式时,如果指定的局部变量名称在对象中不存在,那么这个局部变量会被赋值为undefined<br><br>[注意]一定要用一对小括号包裹解构赋值的语句.js引擎将一对开放的花括号视为一个代码块,语法规定,代码块语句<br>不允许出现在赋值语句左侧,添加小括号后可以将代码块语句转化为一个表达式.从而实现整个解构赋值过程.<br>当指定的属性不存在,可随意定义一个默认值.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    type: <span class="string">"Identifier"</span>,</span><br><span class="line">    name: <span class="string">"foo"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; type, name, value = <span class="literal">true</span> &#125; = node;</span><br><span class="line"><span class="built_in">console</span>.log(type); <span class="comment">// "Identifier"</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// "foo"</span></span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="解构对象结构"><a href="#解构对象结构" class="headerlink" title="解构对象结构"></a>解构对象结构</h2><ul><li>解构嵌套对象仍然与对象字面量的语法相似,可以将对象拆解以获取想要的信息<br></li><li>例:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line"> tyep:<span class="string">'foo'</span>,</span><br><span class="line">  loc:  &#123;</span><br><span class="line">    start: &#123;</span><br><span class="line">       line:<span class="number">1</span>,</span><br><span class="line">       column:<span class="number">1</span></span><br><span class="line">       &#125;,</span><br><span class="line">       end: &#123;</span><br><span class="line">       line:<span class="number">1</span>,</span><br><span class="line">       column:<span class="number">4</span></span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">loc</span>:&#123;start&#125; &#125; =node;</span><br><span class="line">   consoloe.log(start.lone)   <span class="comment">//1 </span></span><br><span class="line">  consolo.log(start.column)  <span class="comment">//1</span></span><br><span class="line"><span class="comment">//更进一步,使用一个与对象属性名不同的局部变量名</span></span><br><span class="line"><span class="comment">// 提取 node.loc.start</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">loc</span>:&#123;<span class="attr">start</span>:localStart&#125;&#125; = node</span><br><span class="line"><span class="built_in">console</span>.log(localStart.line)  <span class="comment">//1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><p>在日常开发中,通常会碰到需要提取数组中的某一项.并把它当在变量中这个需求.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nbaStars=[<span class="string">'yaoming'</span>,<span class="string">'kobe'</span>,<span class="string">'james'</span>,<span class="string">'paul'</span>]</span><br><span class="line"><span class="keyword">let</span> [chinaStar,...usaStar] = nbaStars</span><br><span class="line"><span class="keyword">let</span> [...myidol] = nbaStars</span><br><span class="line"><span class="built_in">console</span>.log(usaStar,chinaStar,myidol)</span><br><span class="line"><span class="comment">//output yaoming ['kobe','james','paul'] paul</span></span><br></pre></td></tr></table></figure></p><p>简单数组解构理解: <br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> [first,second] = colors</span><br><span class="line"><span class="built_in">console</span>.log(first) <span class="comment">//a</span></span><br><span class="line"><span class="built_in">console</span>.log(second) <span class="comment">//b</span></span><br></pre></td></tr></table></figure></p><p><strong>不定元素</strong></p><p>ES6的函数引入了不定参数,而在数组解构语法中有个相似的概念:不定元素;在数组中,可以通过 …语法将数组中剩余的元素赋值给一个指定的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ firstColor, ...restColors ] = colors;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstColor);          <span class="comment">// "red"</span></span><br><span class="line"><span class="built_in">console</span>.log(restColors.length);   <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(restColors[<span class="number">0</span>]);       <span class="comment">// "green"</span></span><br><span class="line"><span class="built_in">console</span>.log(restColors[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>通过不定元素来实现数组克隆 <br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5克隆数组</span></span><br><span class="line"> <span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="comment">//用concat() 方法 设计初衷是链接两个数组.不传参数会返回当前数组的副本</span></span><br><span class="line"><span class="keyword">var</span> clonedColors = colors.concat();</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 通过不定元素来实现相同功能</span></span><br><span class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ];</span><br><span class="line"><span class="keyword">let</span> [ ...clonedColors ] = colors;</span><br><span class="line"><span class="built_in">console</span>.log(clonedColors);   <span class="comment">// "[red,green,blue]"</span></span><br></pre></td></tr></table></figure></p><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p><strong>模板字符串</strong><br>-字符串模板,用反引号 “`” 来创建字符串,此方法创建的字符串里面可以包含由$符号加花括号包裹的变量${value}<br>例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取当前的日期对象</span></span><br><span class="line"> <span class="keyword">const</span> dd = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"> <span class="keyword">const</span> y =dd.getFullYear()</span><br><span class="line"> <span class="keyword">const</span> m =dd.getMonth() +<span class="number">1</span>    <span class="comment">// 0- 11</span></span><br><span class="line"> <span class="keyword">const</span> d =dd.getData().toString()padStart(<span class="number">2</span>,<span class="string">'0'</span>)  <span class="comment">//向前补两位 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hh = dt.getHours()</span><br><span class="line"><span class="keyword">const</span> mm = dt.getMinutes()</span><br><span class="line"><span class="keyword">const</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateStr = <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dateStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'123'</span> <span class="comment">//  在前面填充 3个 0  在后面，填充 3个 o</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = str.padStart(<span class="number">6</span>, <span class="string">'0'</span>).padEnd(<span class="number">9</span>, <span class="string">'o'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**ES6新的方法** &lt;br&gt;</span></span><br><span class="line"><span class="string">startsWith() 和endsWith() &lt;br&gt;</span></span><br><span class="line"><span class="string">- startsWith()  用来判断字符串.是否以指定的字符开头,如果是则返回true  否则false&lt;br&gt;</span></span><br><span class="line"><span class="string">- endsWith()    用来判断字符串.是否以指定的字符结尾,如果是则返回true  否则false&lt;br&gt;</span></span><br><span class="line"><span class="string">- 3. padStart() 和 padEnd()&lt;br&gt;</span></span><br><span class="line"><span class="string">     padStart() 用于头部补全；&lt;br&gt;</span></span><br><span class="line"><span class="string">     padEnd() 用于尾部补全。</span></span><br><span class="line"><span class="string">## 函数扩展 ##</span></span><br><span class="line"><span class="string">一:函数参数的默认值 &lt;br&gt;</span></span><br><span class="line"><span class="string">ES6允许为函数的参数设置默认值.即直接写在参数定义的后面 &lt;br&gt;</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x,y=<span class="number">5</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> x + y</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(log(<span class="number">5</span>))   <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p><strong>箭头函数</strong> <br><br> 特性:箭头函数内部的this 永远和箭头函数外部的this保持一致;<br> 箭头函数本质上是一个匿名函数<br> 箭头函数格式  (参数列表) =&gt; {函数体};</p><p>-变体1：如果箭头函数左侧的形参列表中 只有一个形参，那么，（）可以省略<code>（x) =&gt; { console.log(x)}</code> 直接可以改造成<br>  <code>x =&gt; { console.log(x) }</code><br><br>-变体2 如果箭头函数 左侧只有一个形参，右侧只有一个行代码，那么，左侧的（） 和右侧的{} 都可以省略   <code>(x,y) =&gt; {console.log(x+y) }</code> 可以改造成 <code>(x,y) =&gt; console.log (x+y)</code> <br><br>-变体3 如果箭头函数左侧只有一个形参 右侧只有一行代码，那么左侧的（） 和右侧的 {} 都可以省略 <code>(x) =&gt; {console.log(x)}</code><br>可改造成  <code>x =&gt;console.log(x)</code> <br><br><strong>注意！</strong> ： 如果我们省略的右侧的 {} ，那么默认就会把右侧的函数体中的代码执行结果，返回出去<code>（x,y) =&gt; { return x+y}</code> 直接可简写为 <code>（x,y) =&gt;x+y</code><br><br><strong>案例复制，读取文件</strong>  <br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入fs 文件模块  常量去接收</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入path 模块  提供了一些工具函数，用于处理文件与目录的路径</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为 Windows下默认的编码格式是ASNI，其实这并不是真正的编码格式。但Node.JS默认的编码、解码则是目前通用的UTF-8。因此在读取Windows默认的TXT文件时会显示乱码  </span></span><br><span class="line"><span class="comment">// 想要解决这个问题 可以通过转存为utf-8 格式解决  或者 安装编码解码模块</span></span><br><span class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>)  <span class="comment">//编码解码模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件  path.join()  方法使用平台特定的分隔符 '\'把全部给定的path片段连接到一起，并生成规范的路径，返回string</span></span><br><span class="line"> <span class="comment">// __dirnam 当前模块的目录名称</span></span><br><span class="line">fs.readFile(path.jion(__dirnam,<span class="string">"基于js文件目录+文件名"</span>),(err,data) =&gt; &#123;</span><br><span class="line">    <span class="comment">//如果err 返回对象 则读取不到文件   </span></span><br><span class="line"> <span class="keyword">if</span>(err)   <span class="built_in">console</span>.log(<span class="string">"读取错误"</span>+err.message)</span><br><span class="line"><span class="comment">// 定义一个let 存储 data 这个对象  data 类型是object  并且用iconv 解码模块 转为gbk格式解决乱码</span></span><br><span class="line"><span class="keyword">let</span> datas =iconv.decode(data,<span class="string">'gbk'</span>)</span><br><span class="line"><span class="comment">//用空格分隔txt文件的字符串 </span></span><br><span class="line"><span class="keyword">let</span> str =datas.split(<span class="string">""</span>)</span><br><span class="line"><span class="comment">// 创建一个空的对象接收</span></span><br><span class="line"><span class="keyword">let</span> strs = <span class="string">" "</span> ;</span><br><span class="line">str.forEach( <span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(item.length !=<span class="number">0</span>) &#123;</span><br><span class="line">     strs += item.split(<span class="string">"="</span>).jion(<span class="string">":"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"> fs.writeFile(path.jion(__dirnam,<span class="string">"基于js文件目录+自定义新创建的文件名"</span>),str.trim(),(err,data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)  <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'写入失败'</span>+err.message) </span><br><span class="line">   consloe.log(<span class="string">'写入成功'</span>)</span><br><span class="line">  &#125;）</span><br><span class="line"> &#125;）</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      node入门
    
    </summary>
    
    
      <category term="-node" scheme="https://lipapasma.github.io/lipapa.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Dom 对象</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/27/Dom-%E5%AF%B9%E8%B1%A1/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/27/Dom-对象/</id>
    <published>2018-07-27T00:38:49.000Z</published>
    <updated>2018-07-27T12:05:10.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dom-对象关系"><a href="#Dom-对象关系" class="headerlink" title="Dom 对象关系:"></a>Dom 对象关系:</h2><p>  <img src="https://images2018.cnblogs.com/blog/1364550/201807/1364550-20180726192702227-1138070441.png" alt="dom结构"></p><h2 id="节点自身属性"><a href="#节点自身属性" class="headerlink" title="节点自身属性"></a>节点自身属性</h2><p>  -attributes  —&gt;  节点(元素)的属性节点<br>  -nodeType    —&gt;  节点类型<br>  -nodeValue   —&gt;  节点值<br>  -innerHTML   —&gt;  节点</p><h2 id="导航属性"><a href="#导航属性" class="headerlink" title="导航属性"></a>导航属性</h2><p>  -parentNOde  —&gt; 节点元素的父节点<br>  -firstChild  —&gt; 节点下第一个子元素<br>  -lastChild   —&gt; 节点下最后一个子元素<br>  -childNodes  —&gt; 节点元素的子节点<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello yuan<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">    var div=document.getElementById("div2");</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    console.log(div.nextSibling.nodeName);  //思考:为什么不是P?</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="节点数中的节点彼此拥有的层级关系"><a href="#节点数中的节点彼此拥有的层级关系" class="headerlink" title="节点数中的节点彼此拥有的层级关系"></a>节点数中的节点彼此拥有的层级关系</h2><p>  -父(parent),子(child)和同胞(sibling)等术语用于扫描这些关系.父节点用于子节点,同级的子节点被称为同胞(兄弟)<br>  -在节点数中,顶端节点被称为根(root)<br>  -每个节点都有父节点,除了根(他没有父节点)<br>  -一个节点可拥有任意数量的子<br>  -同胞是拥有相同父节点的节点<br>  <img src="http://images2015.cnblogs.com/blog/1020990/201707/1020990-20170724202913606-469266009.png" alt="节点图"><br>  页面查找:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过 getElementById() 方法</span><br><span class="line">通过 getElementsByTagName() 方法</span><br><span class="line">通过使用 getElementsByClassName() 方法 </span><br><span class="line">通过使用 getElementsByName() 方法</span><br></pre></td></tr></table></figure></p><hr><p>onload:<br>这个属性的触发 标志着页面内容被加载完成.<br>应用场景:当有些事情我们希望页面加载完立刻执行,可以使用该事件属性<br>onsubmit:<br>当表单在提交时触发.该属性也只能给form元素使用.<br>应用场景:在表单提交前验证用户输入是否正确.如果验证失败,在该方法中我们应该阻止表单的提交.<br>Event 对象<br>代表事件的状态,比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p><p>事件通常与函数结合使用，函数不会在事件发生前被执行！event对象在事件发生时系统已经创建好了,并且会在事件函数被调用时传给事件函数.我们获得仅仅需要接收一下即可.</p><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**增加**</span><br><span class="line">createElement(name) 创建元素</span><br><span class="line">appendChild()  将元素追加</span><br><span class="line">**删除**</span><br><span class="line"><span class="number">1</span> 获得要删除的元素</span><br><span class="line"><span class="number">2</span> 获得他的父元素</span><br><span class="line"><span class="number">3</span> 使用removeChild () 方法删除</span><br></pre></td></tr></table></figure><p><strong>改</strong></p><p>1 使用上面的增和删结合完成修改<br>2  第二种  使用 setAttribute() 方法修改属性<br>使用innerHTML 属性修改元素内容</p>]]></content>
    
    <summary type="html">
    
      整理
    
    </summary>
    
      <category term="Dom" scheme="https://lipapasma.github.io/lipapa.github.io/categories/Dom/"/>
    
    
      <category term="JS  Dom" scheme="https://lipapasma.github.io/lipapa.github.io/tags/JS-Dom/"/>
    
  </entry>
  
  <entry>
    <title>Js 基础</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/24/JS%E5%9F%BA%E7%A1%80/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/24/JS基础/</id>
    <published>2018-07-24T12:53:16.623Z</published>
    <updated>2018-07-27T06:21:53.893Z</updated>
    
    <content type="html"><![CDATA[<p>-核心(ECMAScript)<br>-文档对象模型 (DOM) Document object model(整合js,css,html)<br>-浏览器对象模型(BOM) Broswer object model (整合JS和浏览器)</p><p><img src="https://0214-1256944971.cos.ap-shanghai.myqcloud.com/images/JS%E7%BB%93%E6%9E%84.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDhLrlmsZu2BS9qbuH7T02mvHrM4ZLQXZi%26q-sign-time%3D1532444966%3B1532446766%26q-key-time%3D1532444966%3B1532446766%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3D7874cfec1b29823637aee0d50adacdd11523883d&amp;token=bba318659135e08ad4024f97bfa112a80f1e680710001&amp;clientIP=114.221.99.55&amp;clientUA=316099ea-2517-40f5-9a33-9a0a1b0edea7" alt="JS基础图"><br>-简单的数.ECMAScript 描述以下内容:</p><pre><code>- 语法 类型 语句 关键字 保留字 运算符 对象   [      - 1 封装       - 2 继承      - 3 多态]</code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>  <img src="https://0214-1256944971.cos.ap-shanghai.myqcloud.com/images/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%9B%BE.png?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKID6c6VyswU1JilakyJMNCK4e0SC5RlvdHy%26q-sign-time%3D1532444758%3B1532446558%26q-key-time%3D1532444758%3B1532446558%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Df75b88d3eea788d267aed321a65452b10f912a0b&amp;token=5d950fedc44b7910a6e89ec42ec1f6330ff0fb5910001&amp;clientIP=114.221.99.55&amp;clientUA=29940c93-d655-47f6-b58a-1b68d834834c" alt="数据类型图"></p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li>Numeber —&gt; 数字类型 包括整型  浮点型  (整数和小数)<pre><code>- String  ---&gt; 字符串- Boolean ---&gt; 布尔型 ,ture/false- Undefined类型 --&gt; 该类型只有一个值,即undefined,当声明的变量未初始化时,该变量的默认值是undefined,当函数无明确返回值是,返回的也是undefined.- Null  ---&gt; 只有一个专用值 null ,用于表示尚未存在的对象,如果函数或者方法要返回的是对象,那么找不到该对象时,返回的通常是null.</code></pre></li><li>引用数据类型 (复杂数据类型)    <pre><code>- 函数- 对象 - 数组</code></pre></li><li><p>类型查询函数 typeof  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span>(<span class="string">'test'</span>+<span class="number">3</span>)   &lt;!--  <span class="string">"string"</span>  --&gt;</span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>)       &lt;!--  <span class="string">"object"</span>  --&gt;</span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">true</span>+<span class="number">1</span>)     &lt;!--  <span class="string">"number"</span>  --&gt;</span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">true</span>-<span class="literal">false</span>) &lt;!--  <span class="string">"number"</span>  --&gt;</span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2></li></ul>]]></content>
    
    <summary type="html">
    
      知识要点
    
    </summary>
    
      <category term="web" scheme="https://lipapasma.github.io/lipapa.github.io/categories/web/"/>
    
      <category term="JS基础" scheme="https://lipapasma.github.io/lipapa.github.io/categories/web/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="web" scheme="https://lipapasma.github.io/lipapa.github.io/tags/web/"/>
    
      <category term="JS" scheme="https://lipapasma.github.io/lipapa.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>原型是什么</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/24/my-first-blog/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/24/my-first-blog/</id>
    <published>2018-07-24T00:44:32.346Z</published>
    <updated>2018-07-25T04:50:40.045Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=25706282&auto=0&height=66"><br></iframe><br>在JavaScript中原型是一个prototype对象，用于表示类型之间的关系。<br> 原型链是针对构造函数的，比如我先创建了一个函数，然后通过一个变量new了这个函数，那么这个被new出来的函数就会继承创建出来的那个函数的属性，然后如果我访问new出来的这个函数的某个属性，但是我并没有在这个new出来的函数中定义这个变量，那么它就会往上（向创建出它的函数中）查找，这个查找的过程就叫做原型链。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span> ==&gt; 构造函数<span class="number">1</span> ==&gt; 构造函数<span class="number">2</span></span><br><span class="line">&lt;span style=<span class="string">"font-size:14px;"</span>&gt;varPerson=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.age=<span class="string">"匿名"</span>&#125;;</span><br><span class="line">varStudent=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//创建继承关系,prototype执行Person的一个实例对象</span></span><br><span class="line">Student.prototype=<span class="keyword">new</span>  Person();<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>原型API关系图<br><img src="http://images2015.cnblogs.com/blog/341820/201606/341820-20160610194715371-759828586.png" alt="原型图"><br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1532438261291&amp;di=e8d0c0383aea37427b26691f124b1240&amp;imgtype=0&amp;src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-7208c58973fa469891e6be970df3ff54_b.jpg" alt="原型图"><br><img src="https://www.newasp.net/attachment/article/2013-3/20133513150105.jpg" alt="原型继承"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__); <span class="comment">//A &#123;&#125;（即构造器function A 的原型对象）</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__.__proto__); <span class="comment">//Object &#123;&#125;（即构造器function Object 的原型对象）</span></span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__.__proto__.__proto__); <span class="comment">//null</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在JavaScript中原型是一个prototype对象，用于表示类型之间的关系.
    
    </summary>
    
      <category term="JS高级" scheme="https://lipapasma.github.io/lipapa.github.io/categories/JS%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="概念" scheme="https://lipapasma.github.io/lipapa.github.io/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://lipapasma.github.io/lipapa.github.io/2018/07/23/hello-world/"/>
    <id>https://lipapasma.github.io/lipapa.github.io/2018/07/23/hello-world/</id>
    <published>2018-07-23T05:49:18.842Z</published>
    <updated>2018-07-27T12:05:25.205Z</updated>
    
    <content type="html"><![CDATA[<ul><li>安装完成后<br> 在命令行输入:</li></ul><ol><li><code>$git config --global user.name</code> “自定用户名”</li><li><code>t-config --gbobal user.email</code> “自定义邮箱”</li><li>每个机器都需要必须自报家门: 你的名字 和你的Email</li><li>git config 命令的 –global  用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</li></ol><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>###1. 第一步</p><p>   <code>$ mkdir learngit</code><br>    <code>$ cd learngit</code><br>    <code>$ pwd</code><br>    pwd命令用于显示当前目录   代码仓库位于/user/michael/learngit</p><p>###2.第二步<br>初始化一个Git仓库，使用git init命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git init </span><br><span class="line"></span><br><span class="line">Initalized emty Git repository in/user/michael/learngit/.git/</span><br></pre></td></tr></table></figure></p><p>瞬间git 就把仓库建好了,而且告诉你是一个空仓库<br>如果你没看到.git目录 是因为这个目录是默认隐藏, 用ls –ah 命令可以看见</p><p>###第三步，用命令git add告诉Git，把文件添加到仓库：<br>-先创建<br><code>$ touch readme.txt</code><br>-再 add  (将工作区文件提交到暂存区stage)<br><code>$ git add readme.txt</code><br>使用命令git add <file>，注意，可反复多次使用，添加多个文件；</file></p><p>-提交文件<br><code>$ git commit -m &quot;提交的备注信息 便于查找&quot;</code><br>使用命令git commit -m <message>，完成。</message></p><p>###第四步<br>-查看状态<br><code>$git status</code>  </p><p>-查看提交历史<br><code>$git log</code></p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>-首先查看提交历史  复制版本号<br>-再输入以下命令<br><code>git reset --hard 版本号</code></p>]]></content>
    
    <summary type="html">
    
      知识要点
    
    </summary>
    
      <category term="git" scheme="https://lipapasma.github.io/lipapa.github.io/categories/git/"/>
    
      <category term="node" scheme="https://lipapasma.github.io/lipapa.github.io/categories/git/node/"/>
    
    
      <category term="Git" scheme="https://lipapasma.github.io/lipapa.github.io/tags/Git/"/>
    
      <category term="node" scheme="https://lipapasma.github.io/lipapa.github.io/tags/node/"/>
    
  </entry>
  
</feed>
